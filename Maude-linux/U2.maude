mod U2 is
protecting NAT .
sorts Performer Object Group Place .
subsorts Performer Object < Group .
ops left right : -> Place [ctor] .
op changePos : Place -> Place .
op flashlight : Place -> Object [ctor] .
op watch : Nat -> Object [ctor] .
op performer : Nat Place -> Performer [ctor] .
op __ : Group Group -> Group [ctor assoc comm] .
op initial : -> Group .
var P : Place .
vars M N N1 N2 : Nat .
eq initial
= watch(0) flashlight(left) performer(1, left)
performer(2, left) performer(5, left) performer(10, left) .
eq changePos(left) = right .
eq changePos(right) = left .
rl [one-crosses] :
watch(M) flashlight(P) performer(N, P)
=> watch(M + N) flashlight(changePos(P))
performer(N, changePos(P)) .
crl [two-cross] :
watch(M) flashlight(P) performer(N1, P) performer(N2, P)
=> watch(M + N1) flashlight(changePos(P))
performer(N1, changePos(P))
performer(N2, changePos(P))
if N1 > N2 .
endm
