mod RIVER-CROSSING is
sorts Side Group State .
ops left right : -> Side [ctor] .
op change : Side -> Side .
--- shepherd, wolf, goat, cabbage
ops s w g c : Side -> Group [ctor] .
op __ : Group Group -> Group [ctor assoc comm] .
op {_} : Group -> State [ctor] .
op toBeEaten : Group -> Bool .
op initial : -> State .
vars S S’ : Side .
var G : Group .
eq change(left) = right .
eq change(right) = left .
ceq w(S) g(S) s(S’) = w(S) s(S’) if S =/= S’ .
--- wolf eats goat
ceq c(S) g(S) w(S’) s(S’) = g(S) w(S’) s(S’) if S =/= S’ .
--- goat eats cabbage
ceq toBeEaten(w(S) g(S) s(S’) G) = true if S =/= S’ .
ceq toBeEaten(c(S) g(S) s(S’) G) = true if S =/= S’ .
eq toBeEaten(G) = false [owise] .
eq initial = { s(left) w(left) g(left) c(left) } .
crl [shepherd-alone] : { s(S) G } => { s(change(S)) G }
if not(toBeEaten(s(S) G)) .
crl [wolf] : { s(S) w(S) G } => { s(change(S)) w(change(S)) G }
if not(toBeEaten(s(S) w(S) G)) .
rl [goat] : { s(S) g(S) G } => { s(change(S)) g(change(S)) G }.
crl [cabbage] : { s(S) c(S) G } => { s(change(S)) c(change(S)) G }
if not(toBeEaten(s(S) c(S) G)) .
endm
