fmod NEEDED-SORT is
	pr MAP{Nat, Nat}.
	pr SET{Nat} .
	inc NAT .
  	inc INT .
  	inc FLOAT .
	sort Agent .
  	sort Graph .
  	sort Edge .
  	subsort Edge < Graph .

	op ed : Nat Set{Nat} -> Edge [ctor].
	op empty : -> Graph [ctor].
	op _, _ : Graph Graph -> Graph [ctor assoc comm id: empty prec 121 format (d r os d)] .

	op ag : Nat Map{Nat, Nat} -> Agent [ctor] .
 
endfm 

view Agent from TRIV to NEEDED-SORT is
  sort Elt to Agent .
endv
view Graph from TRIV to NEEDED-SORT is
  sort Elt to Graph .
endv

mod MODELO is 
	pr SET{Agent} .

	sort State .

	op a : -> Nat .
	eq a = 1 .
	
	op AL : -> Set{Agent} .
	eq AL = ag(0, (0 |-> 1, 1 |-> 2, 2 |-> 3, 3 |-> 4)), ag(1, (0 |-> 3, 1 |-> 4, 2 |-> 4, 3 |-> 1)), ag(2, (0 |-> 2, 1 |-> 3, 2 |-> 1, 3 |-> 3)), ag(3, (0 |-> 4, 1 |-> 1, 2 |-> 2, 3 |-> 2)) .

	op GRAFO : -> Graph .	
	eq GRAFO = ed(0, (1, 2, 3 )), ed(1, ( 0, 2 )), ed(2, (3, 1)), ed(3, (0, 2)) .
	op < _, _, _ > : Graph Set{Agent} Nat -> State .

	ops AgentList sol : -> Set{Agent} .
	
	op sametreat : Agent Agent -> Set{Agent} .
	
	op threshold : Nat Nat -> Bool .
		
	op idAgent : Agent -> Nat .
	op selectNeighbor : Set{Nat} -> Nat .
	op update : Graph Set{Agent} -> Set{Agent} .
	op pickAgent : Set{Agent} -> Agent .
	op getNeighbors : Graph Nat -> Set{Nat} .
	op getAgent : Set{Agent} Nat -> Agent .
	op inlist : Set{Agent} Nat -> Bool .

	

	vars G NET G' : Graph .
	vars LA LA' : Set{Agent} .
	vars A A' : Agent .
	vars I J K L M N : Nat .
	var V V' : Map{Nat, Nat} .
	var T : Set{Nat} .

	eq inlist((LA, ag(I, V)), I) = true .
	eq inlist(LA, I) = false [owise] .
	eq idAgent(ag(I, V)) = I .
	eq threshold(I, J) = if abs(J - I) <= a then true else false fi .
---	eq changeTreat(A, A') = 
---	eq availableTreat(ag(I, (J |-> k, V)), (ag(L, (J |-> N, V')))) = J,  

	eq getAgent((ag(I, V), LA), I) = ag(I,V)  .
	eq getNeighbors((ed(I, T), G), I) = T .
	eq selectNeighbor((N, T)) = N .
	eq pickAgent((A, LA )) = A .
---	eq update(G, LA) = 
	
	
	
	--- rl [iter] : < G, LA, N >  => <> .
	 
endm
	
	
---(
red getAgent((ag(0, (0 |-> 1, 1 |-> 2, 2 |-> 3, 3 |-> 4)), ag(1, (0 |-> 3, 1 |-> 4, 2 |-> 4, 3 |-> 1)), ag(2, (0 |-> 1, 1 |-> 3, 2 |-> 4, 3 |-> 1))), 1) .
)

